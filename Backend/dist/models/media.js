"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Media = void 0;
const dbConnect_1 = __importDefault(require("./dbConnect"));
const Type = __importStar(require("./types"));
class Media extends dbConnect_1.default {
    constructor() {
        super();
    }
    async get(media_id) {
        let media_query = `
            select * from bf_media
            where id = ${media_id}
        `;
        return new Promise(async (resolve, reject) => {
            this.connection.query(media_query, (err, rows, fields) => {
                if (err) {
                    resolve({
                        status: 404,
                        message: Type.StatusTypes[404],
                        content: { error: err }
                    });
                    return;
                }
                if (rows.length == 0) {
                    resolve({
                        status: 201,
                        message: Type.StatusTypes[201],
                        content: {}
                    });
                    return;
                }
                resolve({
                    status: 100,
                    message: Type.StatusTypes[100],
                    content: {
                        type: rows[0]['likes'],
                        link: rows[0]['link']
                    }
                });
            });
        });
    }
    async add(link, owner, type = 'png') {
        let media_query = `
            INSERT INTO bf_media (type, link)
            VALUES ('${type}', '${link}')
        `;
        let last_id_query = `
                SELECT LAST_INSERT_ID() AS id;
            `;
        return new Promise(async (resolve, reject) => {
            this.connection.query(media_query, (err, rows, fields) => {
                if (err) {
                    resolve({
                        status: 404,
                        message: Type.StatusTypes[404],
                        content: { error: err }
                    });
                    return;
                }
                this.connection.query(last_id_query, (err, rows, fields) => {
                    const id = rows[0]['id'] || 0;
                    if (id == 0 || err) {
                        resolve({
                            status: 404,
                            message: Type.StatusTypes[404],
                            content: { err }
                        });
                        return;
                    }
                    resolve({
                        status: 100,
                        message: Type.StatusTypes[100],
                        content: {
                            id: id
                        }
                    });
                });
            });
        });
    }
    async getAll(user_id) {
        let media_query = `
            select * from bf_media
            where owner = ${user_id}
        `;
        return new Promise(async (resolve, reject) => {
            this.connection.query(media_query, (err, rows, fields) => {
                if (err) {
                    resolve({
                        status: 404,
                        message: Type.StatusTypes[404],
                        content: { error: err }
                    });
                    return;
                }
                resolve({
                    status: 100,
                    message: Type.StatusTypes[100],
                    content: rows
                });
            });
        });
    }
}
exports.Media = Media;
